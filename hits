#!/usr/bin/env perl
# 
# HIgh-Throughput Sequencing (hits) pipeline in Xu Lab
# Author: Qinhu Wang (wangqinhu@nwafu.edu.cn)
# Copyright (c) Xu Lab, Northwest A&F University
#

use strict;
use warnings;
use Getopt::Std;

my $appname = 'hits';
my $version = '0.1.1';
my %options = ();

init();
hits();

sub hits {

	if (uc($options{'p'}) eq 'D') {
		dnaseq();
	}
	if (uc($options{'p'}) eq 'R') {
		rnaseq();
	}

}

sub dnaseq {

	check_app("bowtie2-build");
	check_app("bowtie2");
	check_app("samtools");
	check_app("bcftools");

	print STDERR "Parsing fastq file(s) in $options{'d'}\n";
	my $fqs = find_fastq($options{'d'});
	my $num = keys %{$fqs};
	print STDERR "Total $num pairs of fastq file(s) found.\n";

	if ($num < 1) {
		die  "Aborted: No fastq files found!\n";
	}

	print STDERR "Creating output directory: $options{'o'}\n";
	my $dir = create_directory($options{'o'});

	print STDERR "Runing DNAseq pipeline\n";
	foreach my $fq (sort keys %{$fqs}) {
		print STDERR "Mapping $fq ...\n";
		my $map_cmd = 'bowtie2 -x ' . $options{'g'} .
			' -1 ' . $fqs->{$fq}->{'1'} .
			' -2 ' . $fqs->{$fq}->{'2'};
		my $sam2bam_cmd = "samtools view -bS -";
		my $sortbam_cmd = "samtools sort -o $dir/bam/$fq.bam -";
		system("$map_cmd | $sam2bam_cmd | $sortbam_cmd");
		system("samtools index $dir/bam/$fq.bam");

		print STDERR "Calling variants ...\n";
		my $callvar_cmd = "samtools mpileup -uf $options{'g'} $dir/bam/$fq.bam | bcftools call -cv -O v - > $dir/vcf/$fq.vcf";
		system($callvar_cmd);
		my $callsnp_cmd = "samtools mpileup -uf $options{'g'} $dir/bam/$fq.bam | bcftools call -cv -V indels -O v - > $dir/vcf/$fq.snps.vcf";
		system($callsnp_cmd);
		my $callindel_cmd = "samtools mpileup -uf $options{'g'} $dir/bam/$fq.bam | bcftools call -cv -V snps -O v - > $dir/vcf/$fq.indels.vcf";
		system($callindel_cmd);
	}

	print STDERR "Done\n\n";

	return 1;

}


sub rnaseq {

	check_app("hisat2-build");
	check_app("hisat2");
	check_app("samtools");
	check_app("featureCounts");

	print STDERR "Parsing fastq file(s) in $options{'d'}\n";
	my $fqs = find_fastq($options{'d'});
	my $num = keys %{$fqs};
	print STDERR "Total $num pairs of fastq file(s) found.\n";

	if ($num < 1) {
		die  "Aborted: No fastq files found!\n";
	}

	print STDERR "Creating output directory: $options{'o'}\n";
	my $dir = create_directory($options{'o'});

	print STDERR "Runing RNAseq pipeline\n";
	foreach my $fq (sort keys %{$fqs}) {
		print STDERR "Mapping $fq ...\n";
		my $hisat2_options = "--rna-strandness RF --min-intronlen 20 --max-intronlen 4000 --no-unal --no-temp-splicesite " .
		"--novel-splicesite-outfile $dir/bam/$fq.splicesite --novel-splicesite-infile $dir/bam/$fq.splicesite";
		my $map_cmd = "hisat2 $hisat2_options -x " . $options{'g'} .
			' -1 ' . $fqs->{$fq}->{'1'} .
			' -2 ' . $fqs->{$fq}->{'2'};
		my $sam2bam_cmd = "samtools view -bS -";
		my $sortbam_cmd = "samtools sort -o $dir/bam/$fq.bam -";
		system("$map_cmd | $sam2bam_cmd | $sortbam_cmd");
		system("samtools index $dir/bam/$fq.bam");
	}

	print STDERR "Counting features ...\n";
	my $featureCounts_cmd = "featureCounts -p -s 2 -t exon -g gene_id -a $options{'a'} -o $dir/featureCounts/rnaseq.tsv $dir/bam/*.bam";
	system($featureCounts_cmd);
	format_featurecount_table($dir);

	print STDERR "Done\n\n";

	return 1;

}

sub format_featurecount_table {

	my $dir = shift;
	open (TSV, "$dir/featureCounts/rnaseq.tsv") or die "Cannot open $dir/featureCounts/rnaseq.tsv: $!\n";
	open (XLS, ">$dir/featureCounts/rnaseq.xls") or die "Cannot open $dir/featureCounts/rnaseq.xls: $!\n";
	while (my $line = <TSV>) {
		chomp $line;
		next if ($line =~ /^#/);
		if ($line =~ /^Geneid/) {
			$line =~ s/$dir\/bam\///g;
			$line =~ s/.bam//g;
		}
		my @w = split /\t/, $line, 7;
		print XLS "$w[0]\t$w[6]\n";
	}
	close TSV;
	close XLS;

}

sub find_fastq {

	my $dir = shift;

	$dir =~ s/\/$//;

	my %fastq = ();
	print STDERR "Fastq file(s):\n";
	opendir (FASTQ, $dir) or die "Cannot open $dir: $!\n";
	foreach my $file (sort readdir FASTQ) {
		next if ($file =~ /^\./);
		# regex eg. seq1.1.fq.gz
		#           ----+  =====
		#           prefix: $1, '----'
		#              sep: $2, '+'
		#           suffix: $3, '====='
		#             -----++++++++++++  =========================
		if ($file =~ /(\S+)([\_|\-|\.])1.(fq.gz|fastq.gz|fq|fastq)$/) {
			next unless (-e "$dir/$1" . $2 . "2." . $3);
			$fastq{$1}{'1'} = "$dir/$1" . $2 . "1." . $3;
			$fastq{$1}{'2'} = "$dir/$1" . $2 . "2." . $3;
			print STDERR " + $1\n";
			print STDERR "  - fastq file 1: $fastq{$1}{'1'}\n";
			print STDERR "  - fastq file 2: $fastq{$1}{'2'}\n";
		}
	}
	closedir FASTQ;
	return \%fastq;

}

sub create_directory {

	my $dir = shift;

	$dir =~ s/\/$//;
	
	if (uc($options{'p'}) eq 'D') {
		system("mkdir -p $dir/bam");
		system("mkdir -p $dir/vcf");
	}
	if (uc($options{'p'}) eq 'R') {
		system("mkdir -p $dir/bam");
		system("mkdir -p $dir/featureCounts");
	}

	return $dir;

}

sub init {

	# Check the number of arguments
	if ($#ARGV == -1) {
		usage();
	}

	# Options
	getopts("p:d:g:a:o:hv", \%options) or die "$!\n" . usage();

	# Check help
	if ($options{'h'}) {
		usage();
	}

	# Check version
	if ($options{'v'}) {
		version();
	}

	# Check inputs
	unless ( defined($options{'p'}) ) {
		print STDERR "Aborted: No pipeline specified!\n";
		usage();
	}
	unless ( (uc($options{'p'}) eq 'D') or (uc($options{'p'}) eq 'R') ) {
		print STDERR "Aborted: Unknown pipeline selected!\n";
		usage();
	}

	unless ( defined($options{'g'}) ) {
		print STDERR "Aborted: No reference genome specified!\n";
		usage();
	}
	unless ( defined($options{'d'}) ) {
		print STDERR "Aborted: No fastq directory specified!\n";
		usage();
	}
	unless ( defined($options{'o'}) ) {
		print STDERR "Aborted: No output directory specified!\n";
		usage();
	}

	if (uc($options{'p'}) eq 'R') {
		unless ( defined($options{'a'}) ) {
			print STDERR "Aborted: No annotation file specified!\n";
			usage();
		}
	}

}

sub check_app {

	my $app = shift;

	my $which = `which $app 2>&1`;
	chomp $which;
	my @w = split /\//, $which;
	if (!defined($w[-1]) or $w[-1] ne "$app") {
		die "Aborted: $app is not found!\n";
	} else {
		return 1;
	}

}

sub usage {

	print <<USAGE;

$appname $version

Usage:

    $appname <option>

    -p  pipeline for DNAseq[D] or RNAseq [R]
    -d  directory that contains fastq file(s)
    -g  reference genome
    -a  annotation file in GTF format
    -o  output directory
    -h  help
    -v  version

Examples:

    $appname -p D -d fastq_dir -g genome.fa -o output_dir
    $appname -p R -d fastq_dir -g genome.fa -a gene.gtf -o output_dir

Reporting Bugs:

    Bug reports can be submitted via the web:

    https://github.com/xulab-nwafu/hits/issues

USAGE
	exit;

}

sub version {

	print $appname . ' ' . $version, "\n";
	exit;

}
